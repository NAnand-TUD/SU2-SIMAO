%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                              %
% SU2 configuration file                                                       %
% Case description: AGARD 445.6 wing in inviscid, transonic flow               %
% Author: S. Marques	      	      	                       	       	       %
% Institution: University of Surrey             				               %
% Date: 2019.04.25                                                             %
% File Version 6.2.0 "Falcon"                                                  %
%                                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% ------------- DIRECT, ADJOINT, AND LINEARIZED PROBLEM DEFINITION ------------%
%
% Physical governing equations (EULER, NAVIER_STOKES)
PHYSICAL_PROBLEM= EULER
MATH_PROBLEM= DIRECT
RESTART_SOL= NO
WRT_BINARY_RESTART= YES
READ_BINARY_RESTART= YES

% Interface options ---------------------------------------------------- %
KIND_INTERPOLATION = RADIAL_BASIS_FUNCTION
CONSERVATIVE_INTERPOLATION = NO
KIND_RADIAL_BASIS_FUNCTION = WENDLAND_C2
RADIAL_BASIS_FUNCTION_PARAMETER = 0.015
RADIAL_BASIS_FUNCTION_POLYNOMIAL_TERM = YES

% -------------------- COMPRESSIBLE FREE-STREAM DEFINITION --------------------%
MACH_NUMBER= 0.92
AOA= 0.
SIDESLIP_ANGLE= 0.0
FREESTREAM_PRESSURE= 101325.0
FREESTREAM_TEMPERATURE= 288.15

% ------------------------- UNSTEADY SIMULATION -------------------------------%
%
% Unsteady simulation (NO, TIME_STEPPING, DUAL_TIME_STEPPING-1ST_ORDER,
%                      DUAL_TIME_STEPPING-2ND_ORDER, HARMONIC_BALANCE)
UNSTEADY_SIMULATION= NO %%DUAL_TIME_STEPPING-2ND_ORDER
%
% Time Step for dual time stepping simulations (s)
UNST_TIMESTEP= 0.001
%
% Total Physical Time for dual time stepping simulations (s)
UNST_TIME= 0.5
%
% Number of internal iterations (dual time method)
UNST_INT_ITER= 10

% ---------------------- REFERENCE VALUE DEFINITION ---------------------------%
%
% Reference origin for moment computation
REF_ORIGIN_MOMENT_X = 0.25
REF_ORIGIN_MOMENT_Y = 0.00
REF_ORIGIN_MOMENT_Z = 0.00
%
% Reference length for pitching, rolling, and yaMAIN_BOX non-dimensional moment
REF_LENGTH= 6.0
%
% Reference area for force coefficients (0 implies automatic calculation)
REF_AREA= 0
%
% Flow non-dimensionalization (DIMENSIONAL, FREESTREAM_PRESS_EQ_ONE,
%                              FREESTREAM_VEL_EQ_MACH, FREESTREAM_VEL_EQ_ONE)
REF_DIMENSIONALIZATION= FREESTREAM_PRESS_EQ_ONE

% ----------------------- BOUNDARY CONDITION DEFINITION -----------------------%
%
% Marker of the Euler boundary (0 implies no marker)
MARKER_EULER= ( UPPER, LOWER )
%
% Marker of the far field (0 implies no marker)
MARKER_FAR= ( FF )
%
% Marker of symmetry boundary (0 implies no marker)
MARKER_SYM= ( SYM )

% ------------------------ SURFACES IDENTIFICATION ----------------------------%
%
% Marker(s) of the surface in the surface flow solution file
MARKER_PLOTTING = ( UPPER, LOWER )
%
% Marker(s) of the surface where the non-dimensional coefficients are evaluated.
MARKER_MONITORING = ( UPPER, LOWER )
%
% Marker(s) of the surface where obj. func. (design problem) will be evaluated
MARKER_DESIGNING = ( UPPER, LOWER )

% ------------------------ grid movement type ----------------------------------%
GRID_MOVEMENT = NO
GRID_MOVEMENT_KIND = FLUID_STRUCTURE
MULTIZONE_MESH = NO
INNER_ITER= 60

% ------------- COMMON PARAMETERS TO DEFINE THE NUMERICAL METHOD --------------%
%
% Numerical method for spatial gradients (GREEN_GAUSS, WEIGHTED_LEAST_SQUARES)
NUM_METHOD_GRAD= WEIGHTED_LEAST_SQUARES
%
% Objective function in gradient evaluation  (DRAG, LIFT, SIDEFORCE, MOMENT_X,
%                                             MOMENT_Y, MOMENT_Z, EFFICIENCY,
%                                             EQUIVALENT_AREA, NEARFIELD_PRESSURE,
%                                             FORCE_X, FORCE_Y, FORCE_Z, THRUST,
%                                             TORQUE, FREE_SURFACE, TOTAL_HEATFLUX,
%                                             MAXIMUM_HEATFLUX, INVERSE_DESIGN_PRESSURE,
%                                             INVERSE_DESIGN_HEATFLUX)
OBJECTIVE_FUNCTION= DRAG
%
% Courant-Friedrichs-Lewy condition of the finest grid
CFL_NUMBER= 50.0
%
% Adaptive CFL number (NO, YES)
CFL_ADAPT= NO
%
% Parameters of the adaptive CFL number (factor down, factor up, CFL min value,
%                                        CFL max value )
CFL_ADAPT_PARAM= ( 15, 0.5, 10.0, 100.0 )
%
% Runge-Kutta alpha coefficients
RK_ALPHA_COEFF= ( 0.66667, 0.66667, 1.000000 )
%
% Number of total iterations
EXT_ITER= 250
%
% Linear solver for the implicit formulation (BCGSTAB, FGMRES)
LINEAR_SOLVER= FGMRES
%
% Preconditioner of the Krylov linear solver (ILU, LU_SGS, LINELET, JACOBI)
LINEAR_SOLVER_PREC= ILU
%
% Min error of the linear solver for the implicit formulation
LINEAR_SOLVER_ERROR= 1E-6
%
% Max number of iterations of the linear solver for the implicit formulation
LINEAR_SOLVER_ITER= 4

% ----------------------- SLOPE LIMITER DEFINITION ----------------------------%
%
% Coefficient for the limiter
VENKAT_LIMITER_COEFF= 0.03
%
% Coefficient for the sharp edges limiter
ADJ_SHARP_LIMITER_COEFF= 3.0
%
% Reference coefficient (sensitivity) for detecting sharp edges.
REF_SHARP_EDGES= 3.0
%
% Remove sharp edges from the sensitivity evaluation (NO, YES)
SENS_REMOVE_SHARP= YES

% -------------------------- MULTIGRID PARAMETERS -----------------------------%
%
% Multi-Grid Levels (0 = no multi-grid)
MGLEVEL= 0
%
% Multi-grid cycle (V_CYCLE, W_CYCLE, FULLMG_CYCLE)
MGCYCLE= W_CYCLE
%
% Multi-Grid PreSmoothing Level
MG_PRE_SMOOTH= ( 1, 2, 3, 3 )
%
% Multi-Grid PostSmoothing Level
MG_POST_SMOOTH= ( 0, 0, 0, 0 )
%
% Jacobi implicit smoothing of the correction
MG_CORRECTION_SMOOTH= ( 0, 0, 0, 0 )
%
% Damping factor for the residual restriction
MG_DAMP_RESTRICTION= 0.9
%
% Damping factor for the correction prolongation
MG_DAMP_PROLONGATION= 0.9

% -------------------- FLOW NUMERICAL METHOD DEFINITION -----------------------%
%
% Convective numerical method (JST, LAX-FRIEDRICH, CUSP, ROE, AUSM, HLLC,
%                              TURKEL_PREC, MSW)
CONV_NUM_METHOD_FLOW= JST
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the flow equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_FLOW= YES
%
% Slope limiter (NONE, VENKATAKRISHNAN, VENKATAKRISHNAN_WANG,
%                BARTH_JESPERSEN, VAN_ALBADA_EDGE)
SLOPE_LIMITER_FLOW= NONE
%
% 2nd and 4th order artificial dissipation coefficients
JST_SENSOR_COEFF= ( 0.5, 0.02 )
%
% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT, EULER_EXPLICIT)
TIME_DISCRE_FLOW= EULER_IMPLICIT

% ---------------- ADJOINT-FLOW NUMERICAL METHOD DEFINITION -------------------%
%
% Convective numerical method (JST, LAX-FRIEDRICH, ROE)
CONV_NUM_METHOD_ADJFLOW= JST
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the adjoint flow equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_ADJFLOW= YES
%
% Slope limiter (NONE, VENKATAKRISHNAN, BARTH_JESPERSEN, VAN_ALBADA_EDGE,
%                SHARP_EDGES, WALL_DISTANCE)
SLOPE_LIMITER_ADJFLOW= NONE
%
% 2nd, and 4th order artificial dissipation coefficients
ADJ_JST_SENSOR_COEFF= ( 0.0, 0.02 )
%
% Reduction factor of the CFL coefficient in the adjoint problem
CFL_REDUCTION_ADJFLOW= 0.5
%
% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT)
TIME_DISCRE_ADJFLOW= EULER_IMPLICIT

% --------------------------- CONVERGENCE PARAMETERS --------------------------&
%
% Convergence criteria (CAUCHY, RESIDUAL)
CONV_CRITERIA= RESIDUAL
%
% Residual reduction (order of magnitude with respect to the initial value)
RESIDUAL_REDUCTION= 8
%
% Min value of the residual (log10 of the residual)
RESIDUAL_MINVAL= -12
%
% Start convergence criteria at iteration number
STARTCONV_ITER= 25
%
% Number of elements to apply the criteria
CAUCHY_ELEMS= 100
%
% Epsilon to control the series convergence
CAUCHY_EPS= 1E-10
%
% Function to apply the criteria (LIFT, DRAG, NEARFIELD_PRESS, SENS_GEOMETRY, 
% 	      	    		 SENS_MACH, DELTA_LIFT, DELTA_DRAG)
CAUCHY_FUNC_FLOW= DRAG

% ------------------------- INPUT/OUTPUT INFORMATION --------------------------%
%
% Mesh input file
MESH_FILENAME= goland_scaled.su2 
%
% Mesh output file
MESH_OUT_FILENAME= mesh_out.su2
%
% Restart flow input file
SOLUTION_FLOW_FILENAME= solution_flow.dat
%
% Restart adjoint input file
SOLUTION_ADJ_FILENAME= solution_adj.dat
%
% Mesh input file format (SU2)
MESH_FORMAT= SU2
%
% Output file format (PARAVIEW, TECPLOT)
OUTPUT_FORMAT= PARAVIEW
%
% Output file convergence history
CONV_FILENAME= history
%
% Output file restart flow
RESTART_FLOW_FILENAME= restart_flow.dat
%
% Output file restart adjoint
RESTART_ADJ_FILENAME= restart_adj.dat
%
% Output file flow (w/o extension) variables
VOLUME_FLOW_FILENAME= flow
%
% Output file adjoint (w/o extension) variables
VOLUME_ADJ_FILENAME= adjoint
%
% Output Objective function gradient (using continuous adjoint)
GRAD_OBJFUNC_FILENAME= of_grad.dat
%
% Output file surface flow coefficient (w/o extension)
SURFACE_FLOW_FILENAME= surface_flow
%
% Output file surface adjoint coefficient (w/o extension)
SURFACE_ADJ_FILENAME= surface_adjoint
%
% Writing solution frequency
WRT_SOL_FREQ= 100
%
% Writing convergence history frequency
WRT_CON_FREQ= 1

% ----------------------- DESIGN VARIABLE PARAMETERS --------------------------%
%
% Kind of deformation (TRANSLATION, ROTATION, SCALE,
%                      FFD_SETTING,
%                      FFD_CONTROL_POINT, FFD_CAMBER, FFD_THICKNESS
%                      FFD_NACELLE, FFD_TWIST, FFD_ROTATION,
%                      FFD_CONTROL_POINT_2D, FFD_CAMBER_2D, FFD_THICKNESS_2D,
%                      HICKS_HENNE, PARABOLIC, NACA_4DIGITS, AIRFOIL)
DV_KIND= SCALE_GRID
%
% Marker of the surface in which we are going apply the shape deformation
%DV_MARKER= ( UPPER, LOWER )
%
% Parameters of the shape deformation
% - TRANSLATION ( x_Disp, y_Disp, z_Disp ), as a unit vector
% - ROTATION ( x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
% - SCALE ( 1.0 )
% - FFD_SETTING ( 1.0 )
% - FFD_CONTROL_POINT ( FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Disp, y_Disp, z_Disp )
% - FFD_CAMBER ( FFD_BoxTag, i_Ind, j_Ind )
% - FFD_THICKNESS ( FFD_BoxTag, i_Ind, j_Ind )
% - FFD_TWIST_ANGLE ( FFD_BoxTag, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
% - FFD_ROTATION ( FFD_BoxTag, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
% - FFD_CONTROL_POINT_2D ( FFD_BoxTag, i_Ind, j_Ind, x_Disp, y_Disp )
% - FFD_CAMBER_2D ( FFD_BoxTag, i_Ind )
% - FFD_THICKNESS_2D ( FFD_BoxTag, i_Ind )
% - HICKS_HENNE ( Lower Surface (0)/Upper Surface (1)/Only one Surface (2), x_Loc )
% - PARABOLIC ( Center, Thickness )
% - NACA_4DIGITS ( 1st digit, 2nd digit, 3rd and 4th digit )
% - AIRFOIL ( 1.0 )
DV_PARAM= ( 0.548066491688539 )
%
% Value of the shape deformation
DV_VALUE= 0.5468066491688539

% ------------------------ GRID DEFORMATION PARAMETERS ------------------------%
%
% Linear solver or smoother for implicit formulations (FGMRES, RESTARTED_FGMRES,
%                                                      BCGSTAB)
DEFORM_LINEAR_SOLVER= FGMRES
%
% Number of smoothing iterations for mesh deformation
DEFORM_LINEAR_ITER= 500
%
% Number of nonlinear deformation iterations (surface deformation increments)
DEFORM_NONLINEAR_ITER= 2
%
% Print the residuals during mesh deformation to the console (YES, NO)
DEFORM_CONSOLE_OUTPUT= NO
%
% Factor to multiply smallest cell volume for deform tolerance (0.001 default)
%DEFORM_TOL_FACTOR = 0.001
%
% Type of element stiffness imposed for FEA mesh deformation (INVERSE_VOLUME, 
%                                          WALL_DISTANCE, CONSTANT_STIFFNESS)
DEFORM_STIFFNESS_TYPE= INVERSE_VOLUME
%
% Visualize the deformation (NO, YES)
%VISUALIZE_DEFORMATION= NO

% -------------------- FREE-FORM DEFORMATION PARAMETERS -----------------------%
%
% Tolerance of the Free-Form Deformation point inversion
%FFD_TOLERANCE= 1E-10
%
% Maximum number of iterations in the Free-Form Deformation point inversion
%FFD_ITERATIONS= 500
%
% FFD box definition: 3D case (FFD_BoxTag, X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, X4, Y4, Z4,
%                              X5, Y5, Z5, X6, Y6, Z6, X7, Y7, Z7, X8, Y8, Z8)
%                     2D case (FFD_BoxTag, X1, Y1, 0.0, X2, Y2, 0.0, X3, Y3, 0.0, X4, Y4, 0.0,
%                              0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
%FFD_DEFINITION= (MAIN_BOX, -0.0403, 0.0, -0.04836, 0.8463, 0.0, -0.04836, 1.209, 1.2896, -0.04836, 0.6851, 1.2896, -0.04836, -0.0403, 0.0, 0.04836, 0.8463, 0.0, 0.04836, 1.209, 1.2896, 0.04836, 0.6851, 1.2896, 0.04836)
%
% FFD box degree: 3D case (x_degree, y_degree, z_degree)
%                 2D case (x_degree, y_degree, 0)
%FFD_DEGREE= (10, 8, 1)
%
% Surface continuity at the intersection with the FFD (1ST_DERIVATIVE, 2ND_DERIVATIVE)
%FFD_CONTINUITY= 2ND_DERIVATIVE

% --------------------- OPTIMAL SHAPE DESIGN DEFINITION -----------------------%
%
% Available flow based objective functions or constraint functions
%    DRAG, LIFT, SIDEFORCE, EFFICIENCY,
%    FORCE_X, FORCE_Y, FORCE_Z,
%    MOMENT_X, MOMENT_Y, MOMENT_Z,
%    THRUST, TORQUE, FIGURE_OF_MERIT,
%    EQUIVALENT_AREA, NEARFIELD_PRESSURE, 
%    TOTAL_HEATFLUX, MAXIMUM_HEATFLUX,
%    INVERSE_DESIGN_PRESSURE, INVERSE_DESIGN_HEATFLUX,
%    FREE_SURFACE, AVG_TOTAL_PRESSURE, MASS_FLOW_RATE
%
% Available geometrical based objective functions or constraint functions
%    AIRFOIL_AREA, AIRFOIL_THICKNESS, AIRFOIL_CHORD, AIRFOIL_TOC, AIRFOIL_AOA,
%    WING_VOLUME, WING_MIN_THICKNESS, WING_MAX_THICKNESS, WING_MAX_CHORD, WING_MIN_TOC, WING_MAX_TWIST, WING_MAX_CURVATURE, WING_MAX_DIHEDRAL
%    STATION#_WIDTH, STATION#_AREA, STATION#_THICKNESS, STATION#_CHORD, STATION#_TOC,
%    STATION#_TWIST (where # is the index of the station defined in GEO_LOCATION_STATIONS)
%
% Available design variables
%    HICKS_HENNE 	(  1, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc )
%    SPHERICAL		(  3, Scale | Mark. List | ControlPoint_Index, Theta_Disp, R_Disp )
%    NACA_4DIGITS	(  4, Scale | Mark. List | 1st digit, 2nd digit, 3rd and 4th digit )
%    DISPLACEMENT	(  5, Scale | Mark. List | x_Disp, y_Disp, z_Disp )
%    ROTATION		(  6, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn )
%    FFD_CONTROL_POINT	(  7, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov )
%    FFD_TWIST 	(  9, Scale | Mark. List | FFD_BoxTag, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
%    FFD_ROTATION 	( 10, Scale | Mark. List | FFD_BoxTag, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
%    FFD_CAMBER 	( 11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind )
%    FFD_THICKNESS 	( 12, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind )
%    FOURIER 		( 14, Scale | Mark. List | Lower(0)/Upper(1) side, index, cos(0)/sin(1) )
%    FFD_CONTROL_POINT_2D (  15, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov )
%    FFD_CAMBER_2D 	( 16, Scale | Mark. List | FFD_BoxTag, i_Ind )
%    FFD_THICKNESS_2D 	( 17, Scale | Mark. List | FFD_BoxTag, i_Ind )
%    FFD_CONTROL_SURFACE 	( 18, Scale | Mark. List | FFD_BoxTag, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
%
% Optimization objective function with scaling factor
% ex= Objective * Scale
OPT_OBJECTIVE= DRAG * 1.0
%
% Optimization constraint functions with scaling factors, separated by semicolons
% ex= (Objective = Value ) * Scale, use '>','<','='
OPT_CONSTRAINT= ( LIFT > 0.282557 ) * 1.0
%
% Maximum number of iterations
OPT_ITERATIONS= 100
%
% Requested accuracy
OPT_ACCURACY= 1E-6
%
% Upper bound for each design variable
OPT_BOUND_UPPER= 0.1
%
% Lower bound for each design variable
OPT_BOUND_LOWER= -0.1
%
% Optimization design variables, separated by semicolons
DEFINITION_DV= ( 7, 1.0 | WING | MAIN_BOX, 0, 3, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 1, 3, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 2, 3, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 3, 3, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 4, 3, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 5, 3, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 6, 3, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 7, 3, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 8, 3, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 9, 3, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 10, 3, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 0, 4, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 1, 4, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 2, 4, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 3, 4, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 4, 4, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 5, 4, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 6, 4, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 7, 4, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 8, 4, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 9, 4, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 10, 4, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 0, 5, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 1, 5, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 2, 5, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 3, 5, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 4, 5, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 5, 5, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 6, 5, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 7, 5, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 8, 5, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 9, 5, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 10, 5, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 0, 6, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 1, 6, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 2, 6, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 3, 6, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 4, 6, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 5, 6, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 6, 6, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 7, 6, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 8, 6, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 9, 6, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 10, 6, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 0, 7, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 1, 7, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 2, 7, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 3, 7, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 4, 7, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 5, 7, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 6, 7, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 7, 7, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 8, 7, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 9, 7, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 10, 7, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 0, 8, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 1, 8, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 2, 8, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 3, 8, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 4, 8, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 5, 8, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 6, 8, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 7, 8, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 8, 8, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 9, 8, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 10, 8, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 0, 3, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 1, 3, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 2, 3, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 3, 3, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 4, 3, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 5, 3, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 6, 3, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 7, 3, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 8, 3, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 9, 3, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 10, 3, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 0, 4, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 1, 4, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 2, 4, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 3, 4, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 4, 4, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 5, 4, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 6, 4, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 7, 4, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 8, 4, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 9, 4, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 10, 4, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 0, 5, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 1, 5, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 2, 5, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 3, 5, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 4, 5, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 5, 5, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 6, 5, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 7, 5, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 8, 5, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 9, 5, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 10, 5, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 0, 6, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 1, 6, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 2, 6, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 3, 6, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 4, 6, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 5, 6, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 6, 6, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 7, 6, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 8, 6, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 9, 6, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 10, 6, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 0, 7, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 1, 7, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 2, 7, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 3, 7, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 4, 7, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 5, 7, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 6, 7, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 7, 7, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 8, 7, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 9, 7, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 10, 7, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 0, 8, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 1, 8, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 2, 8, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 3, 8, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 4, 8, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 5, 8, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 6, 8, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 7, 8, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 8, 8, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 9, 8, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | WING | MAIN_BOX, 10, 8, 1, 0.0, 0.0, 1.0 )
